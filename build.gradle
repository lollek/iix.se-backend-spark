plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.1.2-2'
    id 'nu.studer.jooq' version '2.0.7'
}

group 'se.iix.backend.spark'
version '0.1'
mainClassName = 'App'

repositories {
    mavenCentral()
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.5.4'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'
    compile 'io.jsonwebtoken:jjwt:0.7.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.3m'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.3-1100-jdbc4'
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.0-api', version: '1.0.1.Final'
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile 'org.jooq:jooq'
    jooqRuntime 'postgresql:postgresql:9.1-901.jdbc4'

}

task(main, dependsOn: jar, type: JavaExec) {
    main = 'App'
    classpath = sourceSets.main.runtimeClasspath
}

jooq {
    version = '3.9.5'
    edition = 'OSS'
    iix(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/iix-notes'
            user = 'postgres'
            password = 'password'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'INET'
                    }
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
        }
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
